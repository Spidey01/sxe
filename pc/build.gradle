
apply plugin: 'java'
group = 'com.spidey01.sxe.pc'
archivesBaseName = 'sxe-pc'
version = '0.0.1-SNAPSHOT'
description = 'Platform library for x86-based PCs'
   
dependencies {
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version:'2.8.4'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version:'2.8.4'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl-platform', version:'2.8.4'
    compile project(':core')
}

/**
 * Dependent sub projects need to call this closure, passing their project.
 *
 *  - Hooks InstallApp, distZip, and distTar.
 */
project.ext.extractNatives = { subproject ->

    def nativesDir = new File("${buildDir}${File.separator}libs${File.separator}natives")

    def extract = {
        if (nativesDir.exists()) {
            return
        }

        nativesDir.mkdirs()

        configurations.compile.files.each {
            def path = it.toString().replace('\\', '/') // replace is for Winsucks.

            if ((path.contains('lwjgl') || path.contains('jinput'))
                && path.contains('platform')
                && path.contains('-native')
                && path.endsWith('.jar'))
            {
                def start = path.lastIndexOf('/')+1
                def end = path.lastIndexOf('.jar')-1
                def basename = path[ start .. end ]
                def nativeJarToUnpack = path

                copy {
                    from zipTree(path)
                    into nativesDir
                }
            }
        }
    }

    /* Make sure we extract the native files before we do the distribution.
     */
    def distHook = {
        doFirst extract
    }
    subproject.installApp distHook
    subproject.distZip distHook
    subproject.distTar distHook

    /* Copy the native libs from the cp build.
     */
    subproject.applicationDistribution.from(nativesDir) { 
      exclude "META-INF"
      include "*"
      into "lib/natives"
    } 

}

/* Set the start script with a suitable java.library.path.
 *
 * Alternatively this could and likely should be done in the application.
 */
project.ext.filterStartScripts = { subproject ->
    subproject.startScripts {
        doLast {  
            unixScript.text = unixScript.text.replace(
                'exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" ' + subproject.mainClassName,
                'exec "$JAVACMD" "${JVM_OPTS[@]}" -Djava.library.path=$APP_HOME/lib/natives -classpath "$CLASSPATH" ' + subproject.mainClassName
            )

            windowsScript.text = windowsScript.text.replace(
                '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% ',
                '"%JAVA_EXE%" -Djava.library.path=%APP_HOME%\\lib\\natives %DEFAULT_JVM_OPTS% %JAVA_OPTS% '
            )
        }  
    }
}


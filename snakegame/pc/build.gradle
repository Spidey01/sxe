
apply plugin: 'java'
apply plugin:'application'

group = 'com.spidey01.sxe.snakegame.pc'
mainClassName = group + '.Main'
archivesBaseName = 'snakegame-pc'
version = '0.0.1-SNAPSHOT'
description = 'Snake game demo for x86-based PCs'

dependencies {
    compile project(':core')
    compile project(':pc')
    compile project(':snakegame:lib')
}

/** Reprogram start scripts to set the correct java.library.path for LWJGL.
 */
startScripts {  
    doLast {  
        unixScript.text = unixScript.text.replace(
            'exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" ' + mainClassName,
            'exec "$JAVACMD" "${JVM_OPTS[@]}" -Djava.library.path=$APP_HOME/lib/natives -classpath "$CLASSPATH" ' + mainClassName
        )

        windowsScript.text = windowsScript.text.replace(
            '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %PC_OPTS%',
            '"%JAVA_EXE%" -Djava.library.path=%APP_HOME%\\lib\\natives %DEFAULT_JVM_OPTS% %JAVA_OPTS% %PC_OPTS%'
        )
    }  
}

/** Hook installApp, so that LWJGL natives are extracted at the tail.
 */
// project(":snakegame:pc").installApp
installApp << {
    println "Oh how I hate you!"

    project.ext.nativesDir = new File("${destinationDir}${File.separator}lib${File.separator}natives")
    if (!project.ext.nativesDir.mkdir()) {
        throw new TaskExecutionException(installApp)
    }


    project.ext.nativeJarToUnpack = ''
    configurations.compile.files.each {
        def path = it.toString()
        if (path.contains('-native') && path.endsWith('.jar')) {
            path = path.replace('\\', '/') // for Winsucks.

            def start = path.lastIndexOf('/')+1
            def end = path.lastIndexOf('.jar')-1
            def basename = path[ start .. end ]

            project.ext.nativeJarToUnpack = path
            // myUnjar.each{println "it => $it" }
            copy {
                from zipTree(project.ext.nativeJarToUnpack)
                into project.ext.nativesDir
            }
        }
    }
}


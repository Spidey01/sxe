rootProject.name = 'sxe'

/** Our way of deciding what to build for.
 *
 * Value        Description
 *
 * null         Just build core.
 * pc           Code for x86 PCs.
 * android      Code for Android devices.
 */
if (!hasProperty('sxeTarget')) {
    set('sxeTarget', 'core')
}


def sxeTargetConfigurations = [
    'android' : [
        ':deps:pngdecoder',
        ':core',
        ':android',
    ],

    'complete' : [ // build everything.
        ':deps:pngdecoder',
        ':core',
        ':scripting',
        ':scripting:rhino',
        ':pc',
        // TODO: android stuff
        ':demos:helloworld:lib',
        ':demos:helloworld:pc',
        // ':demos:helloworld:android',
        ':demos:pingpong:lib',
        ':demos:pingpong:pc',
        // ':demos:pingpong:android',
        ':demos:snake:lib',
        ':demos:snake:pc',
        // ':demos:snake:android',
    ],

    'core' : [
        ':deps:pngdecoder',
        ':core',
    ],

    'pc' : [
        ':deps:pngdecoder',
        ':core',
        ':pc',
    ],
    'pc-demos' : [
        ':deps:pngdecoder',
        ':core',
        ':pc',
        ':demos:helloworld:lib',
        ':demos:helloworld:pc',
        ':demos:pingpong:lib',
        ':demos:pingpong:pc',
        ':demos:snake:lib',
        ':demos:snake:pc',
    ],

    'scripting' : [ // just the scripting support
        ':deps:pngdecoder',
        ':core',
        ':scripting',
        ':scripting:rhino',
    ],

]

// Get the canonical value of sxeTarget property.
def getSxeTarget = {
    switch (sxeTarget) {
        case [ 'android' ]:
            return 'android'
        case 'complete':
            return 'complete'
        case 'core':
            return 'core'
        case [ 'pc', 'x86' ]:
            return 'pc'
        case [ 'pc-demos', 'x86-demos' ]:
            return 'pc-demos'
        case 'scripting':
            return 'scripting'
        default:
            throw new IllegalStateException('Bad sxeTarget: '+sxeTarget)
    }
}

sxeTargetConfigurations[getSxeTarget()].each { module ->
    include module
}


This is all pretty mock up.

Right now there are two threads:

	A.) main thread that does input polling, rendering, etc.
	B.) game implementation.

Each thread goes about doing it's own business.

Action's bound to keys in the game thread (B) currently run in the main thread

Rendering generally has to be done on the main thread.

	A.) LWJGL won't allow some operations from another thread (at least
            without sync). E.g. making a shader in SnakeGame blows up :/.
	B.) Androids GUI stuff isn't thread safe.

The startup/shutdown sequence is not quite kosher. It needs to be ironed out
and tested but for now, it gets done what it must for development purposes.


LWJGL lets us use whatever OpenGL version is supported when the display is
created. Can't seem to get more details before hand. Joy. Code like this:

        ContextAttribs ca = new ContextAttribs(2, 0).withProfileES(true).withForwardCompatible(false);

Will create something we can use for Display.create(). The only thing is we
can't get a higher version and the ES profile, then whatever the associated
version is. So either we can have a steady ES profile for PC or rely on
whatever we find.


The input manager implementations should provide a way of getting the more
detailed text for an event. E.g. a way to get '`' or 'a' instead of only
'GRAVE' or 'A', respectively.

There needs to be data in the GameContext for telling us things like where are
assets are stored, so it's possible to have it in the game dir on PC, or either
file store on Android. This will entail a bit of XDG'ness too.

There needs to be a "Configuration" system and it should get embedded into the
GameContext. Likely two properties files on PC and two shared preferences files
on Android; one for SxE specific stuff and one for the game.


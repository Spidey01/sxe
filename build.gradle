

apply plugin: 'versions'
apply from: 'gradle/project_glob.gradle'


// this scripts dependencies.
buildscript {
  repositories {
    mavenCentral()
    maven { url "https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo" }
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
  }
}


task tags(type: Exec) {
    executable 'ctags'
    args '-R'
    def pwd = System.getProperty("user.dir")
    if (!pwd.endsWith('/')) { pwd += "/"; }
    project.getSubprojects().each {
        def p = it.projectDir.getPath().replace('\\', '/').minus(pwd)
        args p
        // exclude the gradle build and android gen directories.
        args "--exclude=${p}/build/", "--exclude=${p}/gen/"
    }
    // also these FWIW:
    args 'gradle', 'templates'
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}


task fromTemplate(description: "See gradle/templates/README") << {

    def dest = ''
    if (project.hasProperty('templateDestination')) {
        dest =project.templateDestination
    }
    // windows sanitation
    dest = dest.replace("\\", "/")

    def copyLines = { path, writer ->
        new File(path).eachLine { line ->
            writer.writeLine(line)
        }
    }

    if (dest =~ /\.java$/) {
        new File(dest).withWriter() { output ->
            copyLines("COPYING", output)
            copyLines("gradle/templates/NewClass.java", output)
        }

    }
    else if (dest.endsWith("build.gradle")) {
        new File(dest).withWriter() { output ->
            copyLines("gradle/templates/build.gradle", output)
        }
    }
    else if (dest.isEmpty()) {
        println "Must set property templateDestination."
        println "See gradle/templates/README."
        return
    }
}


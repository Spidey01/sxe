
apply plugin: 'versions'

// this scripts dependencies.
buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.3'
  }
}

allprojects {

    /** So all projects  have this in one place.
     */
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

//
// Like project(':demos:*:pc'), except that doesn't work so I wrote this.
//
def project_glob = { glob ->
    def sanitize = { s -> s.replace('\\', '/').replace('.', '').replace('/', ':') }
    def nodes = []
    def p = ''
    def position = []

    for (segment in glob.substring(1).tokenize(':')) {
        if (segment == '*') {
            (new File(p).list()).each { d ->
                def s = ':' + position.join(':')
                assert glob.startsWith(s)

                // FIXME: index out of range if /:*$'
                def remainder = glob[s.length()+1+segment.length() .. glob.length()-1]
                def fusion = (p+':'+d+remainder).replace('\\', '/').replace('.', '').replace('/', ':')
                // nodes << sanitize(p+':'+d)
                s = sanitize(p+':'+d)
                try {
                    nodes << project(s)
                } catch (org.gradle.api.UnknownProjectException e) {
                    println "For glob "+glob+": "+e
                }
            }
        } else if (segment == '**') {
            throw new RuntimeException(":foo:**:bar syntax not implemented!")
        } else {
            if (nodes.isEmpty()) {
                p = (p.isEmpty() ? './' : p+'/')+segment
                // p = p+'/'+segment
            } else {
                def temp = []
                nodes.each { temp << project(sanitize(it.getPath()+':'+segment)) }
                nodes = temp
            }
        }

        position << segment
    }

    return nodes
}


tasks.create(name: "core-demos", description: "build :demos:*:lib" ) {
    project_glob(":demos:*:lib").each { demo ->
        dependsOn demo.path+':build'
    }
}


// makes pc-demos, android-demos, ...
[ 'pc', 'android' ].each { t ->
    def deps = []
    project_glob(":demos:*:${t}").each { p -> deps << p.path+':build' }

    tasks.create(name: "${t}-demos",
              description: "build :demos:*:${t}",
              dependsOn: deps) { }
}


task tags(type: Exec) {
    executable 'ctags'
    args '-R'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

task fromTemplate(description: "See templates/README") << {

    def dest = ''
    if (project.hasProperty('templateDestination')) {
        dest =project.templateDestination
    }
    // windows sanitation
    dest = dest.replace("\\", "/")

    def copyLines = { path, writer ->
        new File(path).eachLine { line ->
            writer.writeLine(line)
        }
    }

    if (dest =~ /\.java$/) {
        new File(dest).withWriter() { output ->
            copyLines("COPYING", output)
            copyLines("templates/NewClass.java", output)
        }

    }
    else if (dest.endsWith("build.gradle")) {
        new File(dest).withWriter() { output ->
            copyLines("templates/build.gradle", output)
        }
    }
    else if (dest.isEmpty()) {
        println "Must set property templateDestination."
        println "See templates/README."
        return
    }
}

